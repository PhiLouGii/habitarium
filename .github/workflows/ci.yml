name: Continuous Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  IMAGE_TAG: ${{ github.sha }}
  STAGING_SLOT: staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run Frontend Lint and Tests
        run: |
          npm run lint
          npm test -- --ci --runInBand --detectOpenHandles
        working-directory: ./frontend

      - name: Install Backend Dependencies
        run: npm ci
        working-directory: ./backend

      - name: Run Backend Lint and Tests
        run: |
          npm run lint
          npm test -- --runInBand --detectOpenHandles
        working-directory: ./backend

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        with:
          command: test
          args: --all-projects --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./

      - name: Container Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/habitarium:${{ env.IMAGE_TAG }}
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true

      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

      - name: Dependency Scanning
        uses: actions/dependency-review-action@v3

  build-and-push-image:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/habitarium:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.ACR_NAME }}.azurecr.io/habitarium:${{ env.IMAGE_TAG }} ${{ env.ACR_NAME }}.azurecr.io/habitarium:latest

      - name: Scan container with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/habitarium:${{ env.IMAGE_TAG }}
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Push Docker images
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/habitarium:${{ env.IMAGE_TAG }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/habitarium:latest

  deploy-to-staging:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging Slot
        run: |
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --slot ${{ env.STAGING_SLOT }} \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/habitarium:${{ env.IMAGE_TAG }}

      - name: Warm up staging slot
        run: |
          curl -s -o /dev/null -w "%{http_code}" \
          https://${{ env.AZURE_WEBAPP_NAME }}-${{ env.STAGING_SLOT }}.azurewebsites.net/api/health

      - name: Run integration tests
        run: |
          npm run test:e2e
        working-directory: ./tests

  production-approval:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    steps:
      - name: Create Deployment Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1

  deploy-to-production:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap Slots (Promote to Production)
        run: |
          az webapp deployment slot swap \
            --name habitarium-webapp \
            --resource-group habitarium-rg \
            --slot staging \
            --target-slot production

      - name: Verify Production Deployment
        run: |
          curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health | grep '"status":"OK"'
